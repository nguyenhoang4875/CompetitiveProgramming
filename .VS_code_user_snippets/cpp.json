{
	"C++ snippet for Competitive Programming": {
		"prefix": "cp",
		"body": [
			"#include <bits/stdc++.h>",
			"#define int long long",
			"",
			"using namespace std;",
			"",
			"#define pb push_back",
			"#define all(x) (x).begin(), (x).end()",
			"#define all1(x) (x).begin() + 1, (x).end()",
			"#define el '\\n'",
			"#define F first",
			"#define S second",
			"#define Rep(i, n) for (int i = 0, _n = (n); i < _n; i++)",
			"#define For(i, a, b) for (int i = (a); i <= (int)(b); i++)",
			"#define Rof(i, a, b) for (int i = (a); i >= (int)(b); i--)",
			"#define Fore(it, x) for (auto it = (x).begin(); it != (x).end(); ++it)",
			"",
			"using vb = vector<bool>;",
			"using vvb = vector<vb>;",
			"using vc = vector<char>;",
			"using vvc = vector<vc>;",
			"using vi = vector<int>;",
			"using vvi = vector<vi>;",
			"using pii = pair<int, int>;",
			"using vii = vector<pii>;",
			"",
			"//*** START CODING ***//",
			"",
			"const long long oo = 2e18, mod = 1e9 + 7;",
			"const int ms = 2e5 + 5;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int32_t main() {",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    int tcs = 1;",
			"    cin >> tcs;",
			"    while (tcs--) {",
			"        solve();",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "competitive simple"
	},
	"C++ snippet for Competitive Programming 1TC": {
		"prefix": "cp1",
		"body": [
			"#include <bits/stdc++.h>",
			"#define int long long",
			"",
			"using namespace std;",
			"",
			"#define pb push_back",
			"#define all(x) (x).begin(), (x).end()",
			"#define all1(x) (x).begin() + 1, (x).end()",
			"#define el '\\n'",
			"#define F first",
			"#define S second",
			"#define Rep(i, n) for (int i = 0, _n = (n); i < _n; i++)",
			"#define For(i, a, b) for (int i = (a); i <= (int)(b); i++)",
			"#define Rof(i, a, b) for (int i = (a); i >= (int)(b); i--)",
			"#define Fore(it, x) for (auto it = (x).begin(); it != (x).end(); ++it)",
			"",
			"using vb = vector<bool>;",
			"using vvb = vector<vb>;",
			"using vc = vector<char>;",
			"using vvc = vector<vc>;",
			"using vi = vector<int>;",
			"using vvi = vector<vi>;",
			"using pii = pair<int, int>;",
			"using vii = vector<pii>;",
			"",
			"//*** START CODING ***//",
			"",
			"const long long oo = 2e18, mod = 1e9 + 7;",
			"const int ms = 2e5 + 5;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int32_t main() {",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    solve();",
			"    return 0;",
			"}"
		],
		"description": "competitive simple one test case"
	},
	"C++ snippet for Competitive Programming Debug": {
		"prefix": "cpd",
		"body": [
			"#include <bits/stdc++.h>",
			"#define int long long",
			"",
			"using namespace std;",
			"",
			"//*** debug(x) ***//",
			"#define DEBUG 1",
			"",
			"#if DEBUG",
			"#define del cout << '\\n'",
			"#define debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)",
			"template <class X, class Y>",
			"ostream& operator<<(ostream& os, pair<X, Y> const& p) {",
			"    return os << \"(\" << p.first << \", \" << p.second << \")\";",
			"}",
			"template <class Ch, class Tr, class Container>",
			"basic_ostream<Ch, Tr>& operator<<(basic_ostream<Ch, Tr>& os, Container const& x) {",
			"    int i = 0, n = (int)distance(x.begin(), x.end());",
			"    os << \"{ \";",
			"    for (const auto& y : x) os << y << (++i < n ? \", \" : \"\");",
			"    return os << \" }\";",
			"}",
			"template <typename... Args>",
			"void _debug(const char* names, Args&&... args) {",
			"    string_view s(names);",
			"    cout << \"{ \";",
			"    size_t i = 0, cnt = 0, n = sizeof...(args);",
			"    auto next = [&]() {",
			"        while (i < s.size() && (s[i] == ' ' || s[i] == ',')) ++i;",
			"        size_t st = i;",
			"        while (i < s.size() && s[i] != ',') ++i;",
			"        return s.substr(st, i - st);",
			"    };",
			"    ((cout << next() << \": \" << args << (++cnt < n ? \", \" : \"\")), ...);",
			"    cout << \" }\" << '\\n';",
			"}",
			"#else",
			"#define del",
			"#define debug(...)",
			"#endif",
			"",
			"#define pb push_back",
			"#define all(x) (x).begin(), (x).end()",
			"#define all1(x) (x).begin() + 1, (x).end()",
			"#define el '\\n'",
			"#define F first",
			"#define S second",
			"#define Rep(i, n) for (int i = 0, _n = (n); i < _n; i++)",
			"#define For(i, a, b) for (int i = (a); i <= (int)(b); i++)",
			"#define Rof(i, a, b) for (int i = (a); i >= (int)(b); i--)",
			"#define Fore(it, x) for (auto it = (x).begin(); it != (x).end(); ++it)",
			"",
			"using vb = vector<bool>;",
			"using vvb = vector<vb>;",
			"using vc = vector<char>;",
			"using vvc = vector<vc>;",
			"using vi = vector<int>;",
			"using vvi = vector<vi>;",
			"using pii = pair<int, int>;",
			"using vii = vector<pii>;",
			"",
			"//*** START CODING ***//",
			"",
			"const long long oo = 2e18, mod = 1e9 + 7;",
			"const int ms = 2e5 + 5;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int32_t main() {",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    int tcs = 1;",
			"    cin >> tcs;",
			"    while(tcs--) {",
			"        solve();",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "competitive debug test cases"
	},
	"C++ snippet for Competitive Programming Debug one test case": {
		"prefix": "cpd1",
		"body": [
			"#include <bits/stdc++.h>",
			"#define int long long",
			"",
			"using namespace std;",
			"",
			"//*** debug(x) ***//",
			"#define DEBUG 1",
			"",
			"#if DEBUG",
			"#define del cout << '\\n'",
			"#define debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)",
			"template <class X, class Y>",
			"ostream& operator<<(ostream& os, pair<X, Y> const& p) {",
			"    return os << \"(\" << p.first << \", \" << p.second << \")\";",
			"}",
			"template <class Ch, class Tr, class Container>",
			"basic_ostream<Ch, Tr>& operator<<(basic_ostream<Ch, Tr>& os, Container const& x) {",
			"    int i = 0, n = (int)distance(x.begin(), x.end());",
			"    os << \"{ \";",
			"    for (const auto& y : x) os << y << (++i < n ? \", \" : \"\");",
			"    return os << \" }\";",
			"}",
			"template <typename... Args>",
			"void _debug(const char* names, Args&&... args) {",
			"    string_view s(names);",
			"    cout << \"{ \";",
			"    size_t i = 0, cnt = 0, n = sizeof...(args);",
			"    auto next = [&]() {",
			"        while (i < s.size() && (s[i] == ' ' || s[i] == ',')) ++i;",
			"        size_t st = i;",
			"        while (i < s.size() && s[i] != ',') ++i;",
			"        return s.substr(st, i - st);",
			"    };",
			"    ((cout << next() << \": \" << args << (++cnt < n ? \", \" : \"\")), ...);",
			"    cout << \" }\" << '\\n';",
			"}",
			"#else",
			"#define del",
			"#define debug(...)",
			"#endif",
			"",
			"#define pb push_back",
			"#define all(x) (x).begin(), (x).end()",
			"#define all1(x) (x).begin() + 1, (x).end()",
			"#define el '\\n'",
			"#define F first",
			"#define S second",
			"#define Rep(i, n) for (int i = 0, _n = (n); i < _n; i++)",
			"#define For(i, a, b) for (int i = (a); i <= (int)(b); i++)",
			"#define Rof(i, a, b) for (int i = (a); i >= (int)(b); i--)",
			"#define Fore(it, x) for (auto it = (x).begin(); it != (x).end(); ++it)",
			"",
			"using vb = vector<bool>;",
			"using vvb = vector<vb>;",
			"using vc = vector<char>;",
			"using vvc = vector<vc>;",
			"using vi = vector<int>;",
			"using vvi = vector<vi>;",
			"using pii = pair<int, int>;",
			"using vii = vector<pii>;",
			"",
			"//*** START CODING ***//",
			"",
			"const long long oo = 2e18, mod = 1e9 + 7;",
			"const int ms = 2e5 + 5;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int32_t main() {",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    solve();",
			"    return 0;",
			"}"
		],
		"description": "competitive debug one test case"
	},
	"C++ snippet for Competitive Programming Add Debug": {
		"prefix": "adb",
		"body": [
			"//*** debug(x) ***//",
			"#define DEBUG 1",
			"",
			"#if DEBUG",
			"#define del cout << '\\n'",
			"#define debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)",
			"template <class X, class Y>",
			"ostream& operator<<(ostream& os, pair<X, Y> const& p) {",
			"    return os << \"(\" << p.first << \", \" << p.second << \")\";",
			"}",
			"template <class Ch, class Tr, class Container>",
			"basic_ostream<Ch, Tr>& operator<<(basic_ostream<Ch, Tr>& os, Container const& x) {",
			"    int i = 0, n = (int)distance(x.begin(), x.end());",
			"    os << \"{ \";",
			"    for (const auto& y : x) os << y << (++i < n ? \", \" : \"\");",
			"    return os << \" }\";",
			"}",
			"template <typename... Args>",
			"void _debug(const char* names, Args&&... args) {",
			"    string_view s(names);",
			"    cout << \"{ \";",
			"    size_t i = 0, cnt = 0, n = sizeof...(args);",
			"    auto next = [&]() {",
			"        while (i < s.size() && (s[i] == ' ' || s[i] == ',')) ++i;",
			"        size_t st = i;",
			"        while (i < s.size() && s[i] != ',') ++i;",
			"        return s.substr(st, i - st);",
			"    };",
			"    ((cout << next() << \": \" << args << (++cnt < n ? \", \" : \"\")), ...);",
			"    cout << \" }\" << '\\n';",
			"}",
			"#else",
			"#define del",
			"#define debug(...)",
			"#endif",
			""
		],
		"description": "competitive add debug"
	},
	"C++ snippet for Competitive Programming Add run in/out on file": {
		"prefix": "afl",
		"body": [
			"freopen(\"input.txt\", \"r\", stdin);",
			"freopen(\"output.txt\", \"w\", stdout);"
		],
		"description": "competitive add run in/out on file"
	},
	"C++ snippet for Competitive Programming Add check time execution": {
		"prefix": "act",
		"body": [
			"auto start = chrono::high_resolution_clock::now();",
			"// add code",
			"",
			"auto end = chrono::high_resolution_clock::now();",
			"chrono::duration<double> duration = end - start;",
			"cout << \"Execution time: \" << duration.count() << \" seconds\" << endl;"
		],
		"description": "competitive add check time execution"
	},
	"C++ snippet for Competitive Programming Add fast function": {
		"prefix": "aff",
		"body": [
			"__attribute__((target(\"avx2\"), optimize(\"O3\", \"unroll-loops\"))) void work() {",
			"    // add code",
			"}"
		],
		"description": "competitive add fast function"
	},
	"C++ snippet for Competitive Programming Add bit manipulation": {
		"prefix": "abm",
		"body": [
			"int setBit(int n, int pos) { return n |= (1 << pos); }",
			"int clearBit(int n, int pos) { return n &= ~(1 << pos); }",
			"int getBit(int n, int pos) { return (n >> pos) & 1; }",
			"int toggleBit(int n, int pos) { return n ^= (1 << pos); }"
		],
		"description": "competitive add bit manipulation"
	},
	"C++ snippet for Competitive Programming Add get Binary": {
		"prefix": "agb",
		"body": [
			"string getBin(int n) {",
			"    string ans = \"\";",
			"    while (n) {",
			"        if (n & 1) ans.push_back('1');",
			"        else ans.push_back('0');",
			"        n >>= 1;",
			"    }",
			"    reverse(ans.begin(), ans.end());",
			"    return ans;",
			"}"
		]
	},
	"C++ snippet for Competitive Programming Add 4 directions": {
		"prefix": "a4d",
		"body": [
			"const int dx[4] = {0, 0, -1, 1};",
			"const int dy[4] = {-1, 1, 0, 0};"
		]
	},
	"C++ snippet for Competitive Programming Add 8 directions": {
		"prefix": "a8d",
		"body": [
			"const int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};",
			"const int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};"
		]
	}
}