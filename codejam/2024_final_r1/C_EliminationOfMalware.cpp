#include <bits/stdc++.h>
#define int long long

using namespace std;

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(a) (int)(a).size()
#define el '\n'
#define F first
#define S second
#define For(i, a, b) for (int i = a; i <= (int)b; i++)
#define Ford(i, a, b) for (int i = a; i >= (int)b; i--)
#define Fore(it, x) for (auto it = x.begin(); it != x.end(); ++it)

using vb = vector<bool>;
using vvb = vector<vb>;
using vc = vector<char>;
using vvc = vector<vc>;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;
using vii = vector<pii>;

//*** START CODING ***//

const int oo = 2e18, mod = 1e9 + 7;
const int ms = 2e5 + 5;
int n, m, p, k;

void solve() {
    cin >> n >> m >> p >> k;
    vi c(n);
    for (auto &x : c) cin >> x;

    vvi in(n), out(n);
    vi deg(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        u--, v--;
        in[v].push_back(u);
        out[u].push_back(v);
        deg[v]++;
    }

    queue<int> q;
    vi time(n, oo);

    for (int i = 0; i < n; i++) {
        if (deg[i] == 0) {
            q.push(i);
            time[i] = c[i];
        }
    }

    auto getTime = [&in, &time, &c](int v) {
        int maxTime = 0;
        for (auto x : in[v]) {
            maxTime = max(maxTime, time[x]);
        }

        int k = (maxTime - c[v] + p - 1) / p;

        // c[v] + k * p > maxTime
        return c[v] + k * p;
    };

    while (!q.empty()) {
        int cur = q.front();
        q.pop();

        for (auto v : out[cur]) {
            deg[v]--;
            if (deg[v] == 0) q.push(v);
        }

        if (time[cur] != oo) continue;
        time[cur] = getTime(cur);
    }

    // int ret = k * n;
    int ret = 0;
    for (int i = 0; i < n; i++) {
        if (time[i] > k)
            ret += k;
        else
            ret += time[i] - 1;
    }
    ret %= mod;
    cout << ret << el;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int tcs = 1;
    cin >> tcs;
    while (tcs--) solve();

    return 0;
}