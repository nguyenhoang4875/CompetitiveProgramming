PROBLEM SUMMARY:
- Task: [Short task description]
    Give matrix: n, m
    Calculate max sub matrix sum

- Constraints: [Important limits]
    1 <= n, m <= 450
- Time/Space: [Required complexity]
    O(n * m ^ 2)

KEY IDEAS:
- [Key idea 1]
- [Key idea 2]

APPROACH:
- [Algorithm or method]
    Use: DP and Max Range 1D Sum for row
    
    int max2dRangeSum(vector<vector<int>> &a) {
        int n = a.size();
        int m = a[0].size();

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if (j > 0) a[i][j] += a[i][j - 1]; // prefix sum for row
            }
        }

        int maxSumRect = -oo;

        for(int l = 0; l < m; ++l) {
            for(int r = l; r < m; ++r) {
                int subRect = 0;
                for(int row = 0; row < n; ++row) {

                    subRect += a[row][r];
                    if(l > 0) subRect -= a[row][l - 1];

                    if(subRect < 0) subRect = 0;
                    maxSumRect = max(maxSumRect, subRect);
                }
            }
        }
        return maxSumRect;
    }
    
    
- [Main steps]

EDGE CASES:
- [Special cases to watch for]
